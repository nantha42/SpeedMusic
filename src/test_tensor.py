import numpy as np
from pypianoroll import Multitrack, Track
from pypianoroll import *
from matplotlib import pyplot as plt
#from jarvis import *
import time
# Create a pianoroll matrix, where the first and second axes represent time
# and pitch, respectively, and assign a C major chord to the pianoroll


"""
multi = Multitrack("data/flight.mid")
track  = multi.tracks[0]
print(track.pianoroll.shape)
pr = track.pianoroll
"""

"""
pr = np.ones((80,))*50
#newpianoroll = pr[:,71]
newpianoroll =pr
padded = np.zeros((pr.shape[0],128))
padded[:,71] = newpianoroll
#get_notes(pr[:,71])

j = Multitrack(tracks=[Track(pianoroll=padded)])
j.write("summa.mid")
#print(track.pianoroll[np.nonzero(track.pianoroll[100:200,:])].shape)

"""

"""
#print(parse_first_track("test.mid"))
track = Multitrack("test.mid").tracks[0]
#track.pianoroll[0:91,73] = 80
#track.pianoroll[81,73] = 80
track.pianoroll[288:310,73] = 80
fig,axs = track.plot()
plt.show()
print(np.nonzero(track.pianoroll))
print(track.pianoroll[:,71].shape)
print()
#find_closer(44)
"""
import os
#j = [117, 77, 0, 2, 14, 14, 2, 2, 44, 44, 44, 44, 45, 2, 2, 2, 2, 14, 14, 2, 2, 45, 16, 27, 15, 3, 3, 45, 57, 69, 57, 45, 0, 2, 14, 14, 2, 2, 44, 44, 44, 44, 45, 2, 2, 2, 2, 14, 14, 2, 2, 45, 16, 27, 15, 3, 3, 45, 57, 69, 57, 45, 27, 69, 2, 2, 2, 2, 44, 45, 56, 44, 45, 2, 2, 0, 2, 14, 14, 2, 2, 45, 16, 27, 15, 3, 3, 45, 57, 69, 57, 45, 27, 69, 75, 87, 2, 2, 2, 44, 44, 44, 45, 2, 2, 2, 2, 14, 14, 2, 2, 45, 16, 27, 15, 3, 3, 45, 57, 69, 57, 45, 27, 69, 75, 87, 99, 87, 2, 45, 44, 44, 45, 2, 2, 2, 2, 14, 14, 2, 2, 45, 16, 27, 15, 3, 3, 45, 57, 69, 57, 45, 27, 69, 75, 87, 99, 87, 75, 69, 45, 44, 45, 2, 2, 2, 2, 14, 14, 2, 2, 45, 16, 27, 15, 3, 3, 45, 57, 69, 57, 45, 27, 69, 75, 87, 99, 87, 75, 69, 75, 99, 45, 2, 2, 2, 2, 14, 14, 2, 2, 45, 16, 27, 15, 3, 3, 45, 57, 69, 57, 45, 27, 69, 75, 87, 99, 87, 75, 69, 75, 99, 87, 129, 2, 2, 2, 14, 14, 2, 2, 45, 16, 27, 15, 3, 3, 45, 57, 69, 57, 45, 27, 69, 75, 87, 99, 87, 75, 69, 75, 99, 87, 129, 96, 84, 2, 2, 14, 2, 2, 45, 16, 27, 15, 3, 3, 45, 57, 69, 57, 45, 27, 69, 75, 87, 99, 87, 75, 69, 75, 99, 87, 129, 96, 84, 59, 115, 2, 2, 2, 44, 16, 27, 15, 3, 3, 45, 57, 69, 57, 45, 27, 69, 75, 87, 99, 87, 75, 69, 75, 99, 87, 129, 96, 84, 59, 115, 157, 115, 2, 2, 14, 27, 15, 3, 3, 45, 57, 69, 57, 45, 27, 69, 75, 87, 99, 87, 75, 69, 75, 99, 87, 129, 96, 84, 59, 115, 157, 115, 157, 115, 27, 27, 15, 3, 3, 45, 57, 69, 57, 45, 27, 69, 75, 87, 99, 87, 75, 69, 75, 99, 87, 129, 96, 84, 59, 115, 157, 115, 157, 115, 157, 115, 15, 3, 27, 45, 58, 69, 57, 45, 27, 69, 75, 87, 99, 87, 75, 69, 75, 99, 87, 129, 96, 84, 59, 115, 157, 115, 157, 115, 157, 115, 158, 116, 45, 45, 58, 69, 57, 45, 27, 69, 75,
#     87, 99, 87, 75, 69, 75, 99, 87, 129, 96, 84, 59, 115, 157, 115, 157, 115, 157, 115, 158, 116, 158, 116, 27, 45, 75, 45, 27, 69, 75, 87, 99, 87, 75, 69, 75, 99, 87, 129, 96, 84, 59, 115, 157, 115, 157, 115, 157, 115, 158, 116, 158, 116, 158, 116, 75, 45, 27, 69, 75, 87, 99, 87, 75, 69, 75, 99, 87, 129, 96, 84, 59, 115, 157, 115, 157, 115, 157, 115, 158, 116, 158, 116, 158, 116, 158, 116, 27, 15, 75, 87, 45, 87, 75, 69, 75, 99, 87, 129, 96, 84, 59, 115, 157, 115, 157, 115, 157, 115, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 75, 87, 99, 87, 75, 69, 75, 99, 87, 129, 96, 84, 59, 115, 157, 115, 157, 115, 157, 115, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 99, 87, 128, 69, 75, 99, 87, 129, 96, 84, 59, 115, 157, 115, 157, 115, 157, 115, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 99, 87, 75, 87, 87, 129, 96, 84, 59, 115, 157, 115, 157, 115, 157, 115, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 75, 87, 87, 129, 96, 84, 59, 115, 157, 115, 157, 115, 157, 115, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 87, 45, 96, 84, 59, 115, 157, 115, 157, 115, 157, 115, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 96, 84, 59, 115, 157, 115, 157, 115, 157, 115, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 59, 87, 157, 115, 157, 115, 157, 115, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 157, 115, 157, 115, 158, 115, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 157, 115, 157, 115, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 157, 115, 157, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 157, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 126, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 126, 114, 74, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 126, 114, 74, 116, 74, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 126, 114, 74, 116, 74, 116, 74, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 126, 114, 74, 116, 74, 116, 74, 116, 74, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 126, 114, 74, 116, 74, 116, 74, 116, 74, 87, 46, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 126, 114, 74, 116, 74, 116, 74, 116, 74, 87, 46, 47, 87, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 126, 114, 74, 116, 74, 116, 74, 116, 74, 87, 46, 47, 87, 58, 59, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 126, 114, 74, 116, 74, 116, 74, 116, 74, 87, 46, 47, 87, 58, 59, 87, 46, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 126, 114, 74, 116, 74, 116, 74, 116, 74, 87, 46, 47, 87, 58, 59, 87, 46, 47, 45, 158, 116, 158, 116, 158, 116, 158, 116, 158, 116, 158, 126, 114, 74, 116, 74, 116, 74, 116, 74, 87, 46, 47, 87, 58, 59, 87, 46, 47, 45, 4, 45, 158, 116, 158, 116, 158, 116, 158, 116, 158, 126, 114, 74, 116, 74, 116, 74, 116, 74, 87, 46, 47, 87, 58, 59, 87, 46, 47, 45, 4, 45, 15, 27, 158, 116, 158, 116, 158, 116, 158, 126, 114, 74, 116, 74, 116, 74, 116, 74, 87, 46, 47, 87, 58, 59, 87, 46, 47, 45, 4, 45, 15, 27, 15, 3, 158, 116, 158, 116, 158, 126, 114, 74, 116, 74, 116, 74, 116, 74, 87, 46, 47, 87, 58, 59, 87, 46, 47, 45, 4, 45, 15, 27, 15, 3, 27, 3, 158, 116, 158, 126, 114, 74, 116, 74, 116, 74, 116, 74, 87, 46, 47, 87, 58, 59, 87, 46, 47, 45, 4, 45, 15, 27, 15, 3, 27, 3, 45, 58, 158, 74, 116, 74, 116, 74, 116, 74, 116, 74, 87, 46, 47, 87, 58, 59, 87, 46, 47, 45, 4, 45, 15, 27, 15, 3, 27, 3, 45, 58, 69, 57, 114, 74, 116, 74, 116, 74, 116, 74, 87, 46, 47, 87, 58, 59, 87, 46, 47, 45, 4, 45, 15, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 87, 74, 116, 74, 116, 74, 87, 46, 47, 87, 58, 59, 87, 46, 47, 45, 4, 45, 15, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 74, 116, 74, 116, 46, 47, 87, 58, 59, 87, 46, 47, 45, 4, 45, 15, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 87, 74, 116, 46, 47, 87, 58, 59, 87, 46, 47, 45, 4, 45, 15, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 87, 99, 47, 87, 58, 59, 87, 46, 47, 45, 4, 45, 15, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 47, 45, 58, 59, 87, 46, 47, 45, 4, 45, 15, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 99, 69, 87, 46, 47, 45, 4, 45, 15, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 87, 45, 47, 45, 4, 45, 15, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 47, 45, 58, 45, 15, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 45, 27, 45, 15, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 45, 14, 27, 27, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 45, 14, 27, 15, 3, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 45, 14, 27, 15, 3, 27, 3, 45, 69, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 45, 14, 27, 15, 3, 27, 3, 45, 58, 45, 27, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 45, 14, 27, 15, 3, 27, 3, 45, 58, 69, 57, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 45, 14, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 45, 14, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 15, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 45, 14, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 87, 99, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 45, 14, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 27, 15, 68, 74, 87, 99, 87, 128, 110, 86, 130, 45, 14, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 74, 87, 99, 87, 128, 110, 86, 130, 45, 14, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 99, 87, 128, 110, 86, 130, 45, 14, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 87, 45, 110, 86, 129, 45, 14, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 110, 86, 129, 45, 14, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 128, 129, 45, 14, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 128, 185, 173, 27, 27, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 128, 185, 173, 160, 188, 15, 3, 27, 3, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 128, 185, 173, 160, 188, 158, 180, 45, 69, 45, 58, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 128, 185, 173, 160, 188, 158, 180, 156, 180, 45, 27, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 128, 185, 173, 160, 188, 158, 180, 156, 180, 156, 180, 69, 57, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 128, 185, 173, 160, 188, 158, 180, 156, 180, 156, 180, 156, 180, 45, 27, 69, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 128, 185, 173, 160, 188, 158, 180, 156, 180, 156, 180, 156, 180, 156, 180, 15, 75, 87, 45, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 128, 185, 173, 160, 188, 158, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 87, 99, 27, 75, 68, 74, 87, 99, 87, 128, 110, 86, 130, 128, 185, 173, 160, 188, 158, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 27, 15, 68, 74, 87, 99, 87, 128, 110, 86, 130, 128, 185, 173, 160, 188, 158, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 87, 74, 87, 99, 87, 128, 110, 86, 130, 128, 185, 173, 160, 188, 158, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 87, 99, 87, 128, 110, 86, 130, 128, 185, 173, 160, 188, 158, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 87, 45, 110, 86, 129, 128, 185, 173, 160, 188, 158, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 110, 86, 129, 128, 185, 173, 160, 188, 158, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 129, 128, 185, 173, 160, 188, 158, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 110, 173, 160, 188, 158, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 160, 188, 158, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 158, 116, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180, 156, 180]
#print(set(j))
def converter(j):
    orray = np.ones([48,len(j)])*-1
    for i in range(len(j)):
        if j[i]!=288:
            x = j[i]
            p = int(x/6)
            v = x%6
            orray[p,i] = v

    np.save("generated.npy",orray)
#converter(j)
#import os
#for i in os.listdir("saved/"):
#    print(i)
def find_closer( x):
    """
    Returns the closest resemblance of the note type
    such as whole(96),half(48),half+quarter.
    Currently ex_dura feature is turned off, because of
    reducing complexity
    :param x:
    :return:
    """
    measure_limit = 80
    measure_length = 32

    # ex_dura = [96,72,48,36,24,18,12,9,6,4,3]
    dura = [measure_length, measure_length / 2, measure_length / 4, measure_length / 8,
            measure_length / 16, measure_length / 32]
    dura.reverse()
    dura = np.array(dura)
    my_dura = [0.125, 0.25, 0.5, 1, 2, 4]
    my_dura = np.array(my_dura)
    duration = my_dura[np.argmin(np.abs(x - dura))] * 8
    # print(duration)
    return duration


def get_notes( key_row):
    """
    Returns a list of list of starting position
    and duration of a particular note in the entire track
    :param key_row:
    :return:
    """
    nonzeros = np.nonzero(key_row)[0]
    # print("Nonzeros1",nonzeros)
    notes = []
    if len(nonzeros) > 0:
        start = int(nonzeros[0])
        prestart = start
        length = 0
        # tuple stores length start,length
        for i in range(1, len(nonzeros)):
            if start + 1 == nonzeros[i] and i < len(nonzeros) - 1:
                length += 1
                start += 1
            else:
                notes.append([prestart, find_closer(length)])
                length = 0
                prestart = int(nonzeros[i])
                start = prestart
            pass
        print("Notes", notes)
        return notes
    else:
        return []
    # print(nonzeros.shape)

def parse_first_track( file):
    """
    Parses the midi file and converts it into the format
    required for my pianoroll function.
    :param file:
    :return:
    """
    measure_limit = 80
    measure_length=32
    # takes only the first track
    track = Multitrack(file).tracks[0]
    print("Track", track.pianoroll)
    shortened_track = []
    for i in range(128):
        range_array = get_notes(track.pianoroll[:measure_limit * measure_length, i])
        # print(range_array)
        if len(range_array) > 0:
            shortened_track.append([i, range_array])
    shortened_track = np.array(shortened_track)
    # print("shape", shortened_track.shape)
    modified_track = []
    for each_note_row in shortened_track:
        n = each_note_row[0]
        ranges = np.array(each_note_row[1])
        print(ranges.shape)
        ranges[:, 0] = ranges[:, 0] / 3
        modified_track.append([n, ranges])
    return modified_track
def load_file(parsed_track,measure_limit):
    """
    Converts the parsed track and loads into the pianoroll
    numpy array. parsed_track is divided by 3 so the basic time
    unit is 32nd note.
    """
    #print("Par",parsed_track )
    #print()
    array = np.ones([48,int(measure_limit)])*-1
    for note_index,notes_track in parsed_track:
        note_index = note_index-36
        if note_index >=0 and note_index <48 :
            for pos,dura in notes_track:
                #print("Error",note_index,pos,np.log2(dura))
                if int(pos)<array.shape[1]:
                    print(47-note_index,int(pos),array.shape,np.log2(dura))
                    array[47-note_index][int(pos)] = np.log2(dura)
                    #notes_index.append([47-note_index,int(pos)])
    notes = array
    np.save("saved2/"+str(time.time()),notes)

if __name__ == '__main__':
    measure_limit = 80
    measure_length = 32
    for i in os.listdir("data2/"):
        if i[-4:] ==".mid":
            print(i)
            parsed_track = parse_first_track("data2/"+i)
            #print(parsed_track)
            load_file(parsed_track,measure_limit * measure_length)

        #self.pianoroll.load_file(parsed_track, self.measure_limit * self.measure_length)